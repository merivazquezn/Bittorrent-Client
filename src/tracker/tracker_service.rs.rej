diff a/src/tracker/tracker_service.rs b/src/tracker/tracker_service.rs	(rejected hunks)
@@ -71,7 +71,7 @@ impl TrackerService {
     /// let metainfo = Metainfo::from_torrent(torrent_path).unwrap();
     /// let mut http_service = HttpsService::from_url(&metainfo.announce).unwrap();
     /// let mut tracker_service = TrackerService::from_metainfo(&metainfo, config.listen_port, &peer_id, Box::new(http_service));
-    /// let peer_list = tracker_service.get_peers().unwrap();
+    /// let peer_list = tracker_service.get_response().unwrap();
     /// println!("{:?}", peer_list);
     /// ```
     pub fn get_response(&mut self) -> Result<TrackerResponse, TrackerError> {
@@ -259,10 +259,10 @@ mod tests {
         let connection = Box::new(MockHttpsService { read_bytes: vec![] });
         let mut tracker_service =
             TrackerService::from_metainfo(&metainfo, config.listen_port, &peer_id, connection);
-        let result = tracker_service.get_peers();
+        let result = tracker_service.get_response();
         println!("result {:?}", result);
         assert!(matches!(
-            tracker_service.get_peers(),
+            tracker_service.get_response(),
             Err(TrackerError::BencodeError(_))
         ));
     }
@@ -294,9 +294,9 @@ mod tests {
         });
         let mut tracker_service =
             TrackerService::from_metainfo(&metainfo, config.listen_port, &peer_id, connection);
-        assert_eq!(tracker_service.get_peers().unwrap().peers.len(), 1);
+        assert_eq!(tracker_service.get_response().unwrap().peers.len(), 1);
         assert_eq!(
-            tracker_service.get_peers().unwrap().peers[0],
+            tracker_service.get_response().unwrap().peers[0],
             Peer {
                 ip: "0.0.0.0".to_string(),
                 port: 10000,
